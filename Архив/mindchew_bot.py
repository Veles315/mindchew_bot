import os
import json
import openai
import asyncio
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, ContextTypes, CallbackQueryHandler, CommandHandler, MessageHandler, filters
from dotenv import load_dotenv




# üîë –í–°–¢–ê–í–¨ –°–í–û–ò –ö–õ–Æ–ß–ò
load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

HISTORY_FILE = "user_history.json"
REMINDERS_FILE = "user_reminders.json"  # –§–∞–π–ª —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
FREE_MESSAGE_LIMIT = 5
FREE_REMINDER_LIMIT = 1  # –†–∞–∑—Ä–µ—à–µ–Ω–æ 1 –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
REMINDER_STATE = {}  # –î–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: user_id: {step, date, time, text}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
if os.path.exists(HISTORY_FILE):
    with open(HISTORY_FILE, "r", encoding="utf-8") as f:
        user_history = json.load(f)
else:
    user_history = {}

if os.path.exists(REMINDERS_FILE):
    with open(REMINDERS_FILE, "r", encoding="utf-8") as f:
        user_reminders = json.load(f)
else:
    user_reminders = {}
SUBSCRIPTIONS_FILE = "subscriptions.json"

if os.path.exists(SUBSCRIPTIONS_FILE):
    with open(SUBSCRIPTIONS_FILE, "r", encoding="utf-8") as f:
        subscriptions = json.load(f)
else:
    subscriptions = {}

def is_subscribed(user_id):
    sub = subscriptions.get(str(user_id))
    if not sub:
        return False
    expire_str = sub.get("until")
    try:
        expire_dt = datetime.strptime(expire_str, "%Y-%m-%d")
        return expire_dt >= datetime.now()
    except:
        return False

def save_subscriptions():
    with open(SUBSCRIPTIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(subscriptions, f, ensure_ascii=False, indent=2)

# --- –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
def save_reminders():
    with open(REMINDERS_FILE, "w", encoding="utf-8") as f:
        json.dump(user_reminders, f, ensure_ascii=False, indent=2)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
def count_active_reminders(user_id):
    now_ts = datetime.now().timestamp()
    reminders = user_reminders.get(user_id, [])
    # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –≤—Ä–µ–º–µ–Ω–µ–º –≤ –±—É–¥—É—â–µ–º
    active = [r for r in reminders if datetime.strptime(r["datetime"], "%Y-%m-%d %H:%M").timestamp() > now_ts]
    return len(active)

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
async def send_reminder_later(context, chat_id, text, delay, user_id, reminder_id):
    await asyncio.sleep(delay)
    await context.bot.send_message(chat_id=chat_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{text}")
    # –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    if user_id in user_reminders:
        user_reminders[user_id] = [r for r in user_reminders[user_id] if r["id"] != reminder_id]
        save_reminders()

# --- –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üß† –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏", callback_data="analyze_personality")],
        [InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="set_reminder")],
        [InlineKeyboardButton("üìù –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="my_reminders")],
        [InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Boosty", url="https://boosty.to/birukov-systems/posts/89b1960e-ceff-4f71-9b77-9040e631a7db?share=success_publish_link")],
        [InlineKeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="reset_history")]
    ]
    await update.message.reply_text(
        """üß† –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî MindChewBot.
–ù–∞–ø–∏—à–∏, —á—Ç–æ —É —Ç–µ–±—è –≤ –≥–æ–ª–æ–≤–µ ‚Äî –≤—Å—ë, —á—Ç–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫—Ä—É—Ç–∏—Ç—Å—è –≤ –º—ã—Å–ª—è—Ö.

–Ø –ø–æ–º–æ–≥—É –Ω–∞–≤–µ—Å—Ç–∏ –ø–æ—Ä—è–¥–æ–∫, –ø–æ–∫–∞–∂—É —Ç–≤–æ–π —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ –ø–æ–¥—Å–∫–∞–∂—É, –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∑–∞—Ç—ã–∫–∏.

‚úç –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ –ø–∏—Å–∞—Ç—å ‚Äî –∫–∞–∫ –¥—Ä—É–≥—É.""",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = query.data
    await query.answer()

    if data == "analyze_personality":
        await analyze_personality(update, context)

    elif data == "reset_history":
        if user_id in user_history:
            del user_history[user_id]
        await query.message.reply_text("‚ôªÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.")

    elif data == "set_reminder":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        active_count = count_active_reminders(user_id)
        if not is_subscribed(user_id) and active_count >= FREE_REMINDER_LIMIT:
            await query.message.reply_text(
                f"üö´ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å {FREE_REMINDER_LIMIT} –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n"
                "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ ‚Äî –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É üí≥: [Boosty](https://boosty.to/birukov-systems/posts/89b1960e-ceff-4f71-9b77-9040e631a7db?share=success_publish_link)",
                parse_mode="Markdown"
            )
            return

        REMINDER_STATE[user_id] = {"step": "date"}
        today = datetime.now().date()
        buttons = []
        for i in range(7):
            day = today + timedelta(days=i)
            buttons.append([InlineKeyboardButton(day.strftime("%Y-%m-%d"), callback_data=f"reminder_date_{day.isoformat()}")])
        await query.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(buttons))

    elif data == "my_reminders":
        reminders = user_reminders.get(user_id, [])
        if not reminders:
            await query.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return

        keyboard = []
        for r in reminders:
            dt = r["datetime"]
            txt = r["text"]
            rid = r["id"]
            keyboard.append([InlineKeyboardButton(f"{dt} ‚Äî {txt[:20]}...", callback_data=f"edit_reminder_{rid}")])
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        await query.message.reply_text("–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("reminder_date_"):
        date_str = data[len("reminder_date_"):]
        REMINDER_STATE[user_id]["date"] = date_str
        REMINDER_STATE[user_id]["step"] = "hour"

        hours = [InlineKeyboardButton(f"{h:02d}", callback_data=f"reminder_hour_{h}") for h in range(24)]
        keyboard = [hours[i:i+6] for i in range(0, 24, 6)]

        await query.message.reply_text("üïí –í—ã–±–µ—Ä–∏ —á–∞—Å:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("reminder_hour_"):
        hour = int(data[len("reminder_hour_"):])
        REMINDER_STATE[user_id]["hour"] = hour
        REMINDER_STATE[user_id]["step"] = "minute"

        minutes = [0, 15, 30, 45]
        buttons = [InlineKeyboardButton(f"{m:02d}", callback_data=f"reminder_minute_{m}") for m in minutes]
        await query.message.reply_text("‚è± –í—ã–±–µ—Ä–∏ –º–∏–Ω—É—Ç—ã:", reply_markup=InlineKeyboardMarkup([buttons]))

    elif data.startswith("reminder_minute_"):
        minute = int(data[len("reminder_minute_"):])
        REMINDER_STATE[user_id]["minute"] = minute
        REMINDER_STATE[user_id]["step"] = 3
        await query.message.reply_text("üí¨ –ß—Ç–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

    elif data.startswith("edit_reminder_"):
        rid = data[len("edit_reminder_"):]
        reminders = user_reminders.get(user_id, [])
        reminder = next((r for r in reminders if r["id"] == rid), None)
        if not reminder:
            await query.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_text_{rid}")],
            [InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è", callback_data=f"edit_datetime_{rid}")],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data=f"delete_reminder_{rid}")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="my_reminders")]
        ]
        await query.message.reply_text(
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{reminder['datetime']}\n{reminder['text']}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith("delete_reminder_"):
        rid = data[len("delete_reminder_"):]
        reminders = user_reminders.get(user_id, [])
        user_reminders[user_id] = [r for r in reminders if r["id"] != rid]
        save_reminders()
        await query.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        reminders = user_reminders.get(user_id, [])
        if not reminders:
            await query.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return

        keyboard = []
        for r in reminders:
            dt = r["datetime"]
            txt = r["text"]
            rid = r["id"]
            keyboard.append([InlineKeyboardButton(f"{dt} ‚Äî {txt[:20]}...", callback_data=f"edit_reminder_{rid}")])
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        await query.message.reply_text("–¢–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("edit_text_"):
        rid = data[len("edit_text_"):]
        REMINDER_STATE[user_id] = {"step": "edit_text", "reminder_id": rid}
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

    elif data.startswith("edit_datetime_"):
        rid = data[len("edit_datetime_"):]
        REMINDER_STATE[user_id] = {"step": "edit_datetime_date", "reminder_id": rid}
        today = datetime.now().date()
        buttons = []
        for i in range(7):
            day = today + timedelta(days=i)
            buttons.append([InlineKeyboardButton(day.strftime("%Y-%m-%d"), callback_data=f"edit_date_{rid}_{day.isoformat()}")])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É:", reply_markup=InlineKeyboardMarkup(buttons))

    elif data.startswith("edit_date_"):
        parts = data.split("_")
        rid = parts[2]
        new_date = parts[3]
        REMINDER_STATE[user_id]["new_date"] = new_date
        REMINDER_STATE[user_id]["step"] = "edit_datetime_hour"

        hours = [InlineKeyboardButton(f"{h:02d}", callback_data=f"edit_hour_{rid}_{h}") for h in range(24)]
        keyboard = [hours[i:i+6] for i in range(0, 24, 6)]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("edit_hour_"):
        parts = data.split("_")
        rid = parts[2]
        new_hour = int(parts[3])
        REMINDER_STATE[user_id]["new_hour"] = new_hour
        REMINDER_STATE[user_id]["step"] = "edit_datetime_minute"

        minutes = [0, 15, 30, 45]
        buttons = [InlineKeyboardButton(f"{m:02d}", callback_data=f"edit_minute_{rid}_{m}") for m in minutes]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –º–∏–Ω—É—Ç—ã:", reply_markup=InlineKeyboardMarkup([buttons]))

    elif data.startswith("edit_minute_"):
        parts = data.split("_")
        rid = parts[2]
        new_minute = int(parts[3])
        state = REMINDER_STATE[user_id]

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminders = user_reminders.get(user_id, [])
        reminder = next((r for r in reminders if r["id"] == rid), None)
        if not reminder:
            await query.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        new_dt_str = f"{state['new_date']} {state['new_hour']:02d}:{new_minute:02d}"
        try:
            dt_obj = datetime.strptime(new_dt_str, "%Y-%m-%d %H:%M")
            if dt_obj < datetime.now():
                await query.message.reply_text("–í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
        except:
            await query.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏.")
            return

        reminder["datetime"] = new_dt_str
        save_reminders()
        REMINDER_STATE.pop(user_id, None)
        await query.message.reply_text("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        await button_handler(update, context)

    elif data == "back_to_menu":
        await start(update, context)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    msg = update.message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if user_id in REMINDER_STATE:
        state = REMINDER_STATE[user_id]

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—à–∞–≥–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–µ–∫—Å—Ç–∞)
        if state.get("step") == 3:
            state["text"] = msg
            dt_str = f"{state['date']} {state['hour']:02d}:{state['minute']:02d}"
            try:
                remind_at = datetime.strptime(dt_str, "%Y-%m-%d %H:%M")
                delay = (remind_at - datetime.now()).total_seconds()
                if delay < 0:
                    await update.message.reply_text("‚è≥ –í—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
                rid = f"{int(datetime.now().timestamp())}_{user_id}"
                reminder = {
                    "id": rid,
                    "datetime": dt_str,
                    "text": state["text"]
                }
                if user_id not in user_reminders:
                    user_reminders[user_id] = []
                user_reminders[user_id].append(reminder)
                save_reminders()

                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                asyncio.create_task(send_reminder_later(context, update.effective_chat.id, state["text"], delay, user_id, rid))

                await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                REMINDER_STATE.pop(user_id, None)
                return
            except Exception as e:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
                return

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        elif state.get("step") == "edit_text":
            rid = state.get("reminder_id")
            reminders = user_reminders.get(user_id, [])
            reminder = next((r for r in reminders if r["id"] == rid), None)
            if reminder:
                reminder["text"] = msg
                save_reminders()
                await update.message.reply_text("–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω.")
            else:
                await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            REMINDER_STATE.pop(user_id, None)
            return

    # –ò–Ω–∞—á–µ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å GPT (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if user_id not in user_history:
        user_history[user_id] = {"messages": [], "count": 0}
    history = user_history[user_id]

    if not is_subscribed(user_id) and history["count"] >= FREE_MESSAGE_LIMIT:
        await update.message.reply_text(
            "üö´ –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É üí≥: [Boosty](https://boosty.to/birukov-systems/posts/89b1960e-ceff-4f71-9b77-9040e631a7db?share=success_publish_link)",
            parse_mode="Markdown"
        )
        return

    history["messages"].append({"role": "user", "content": msg})
    history["count"] += 1

    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã—Å–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."},
                *history["messages"][-10:]
            ],
            temperature=0.7,
            max_tokens=500
        )
        reply = response.choices[0].message.content.strip()
        await update.message.reply_text(reply)
        history["messages"].append({"role": "assistant", "content": reply})
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(user_history, f, ensure_ascii=False, indent=2)

# --- –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ (–∫–∞–∫ –µ—Å—Ç—å) ---
async def analyze_personality(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id if update.message else update.callback_query.from_user.id)

    if user_id not in user_history or not user_history[user_id]["messages"]:
        text = "‚ÑπÔ∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        if update.message:
            await update.message.reply_text(text)
        else:
            await update.callback_query.message.reply_text(text)
        return

    if "mbti" in user_history[user_id]:
        text = f"üß† –í–æ—Ç —Ç–≤–æ–π —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏:\n\n{user_history[user_id]['mbti']}"
        if update.message:
            await update.message.reply_text(text)
        else:
            await update.callback_query.message.reply_text(text)
        return

    user_msgs = [msg["content"] for msg in user_history[user_id]["messages"] if msg["role"] == "user"]
    total_chars = sum(len(m) for m in user_msgs)
    MIN_CHARS = 600

    if total_chars < MIN_CHARS:
        text = f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –µ—â—ë –º–∏–Ω–∏–º—É–º {MIN_CHARS} —Å–∏–º–≤–æ–ª–æ–≤ —Å—É–º–º–∞—Ä–Ω–æ."
        if update.message:
            await update.message.reply_text(text)
        else:
            await update.callback_query.message.reply_text(text)
        return

    prompt = "–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ MBTI –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç, –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 450 —Å–∏–º–≤–æ–ª–æ–≤, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:\n\n"
    for i, m in enumerate(user_msgs, 1):
        prompt += f"{i}. {m}\n"

    try:
        response = openai.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–∏–ø–∞–º –ª–∏—á–Ω–æ—Å—Ç–∏ MBTI. –ù–∞–ø–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±—ä—ë–º–æ–º –ø—Ä–∏–º–µ—Ä–Ω–æ 1300-1500 —Å–∏–º–≤–æ–ª–æ–≤. –í –∞–Ω–∞–ª–∏–∑–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:\n"
                        "1. –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ (MBTI).\n"
                        "2. –ù–∞–π–¥–∏ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏ —Ç—ë–º–Ω—ã–µ –∑–æ–Ω—ã ‚Äî —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–µ—Ç —Å—Ç–∞–ª–∫–∏–≤–∞—Ç—å—Å—è —á–µ–ª–æ–≤–µ–∫ —Å —ç—Ç–∏–º —Ç–∏–ø–æ–º.\n"
                        "3. –û–ø—Ä–µ–¥–µ–ª–∏ –∑–æ–Ω—ã –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ ‚Äî —á—Ç–æ –≤–∞–∂–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–∏, –ø–æ–≤—ã—Å–∏—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.\n"
                        "4. –û–±—ä—è—Å–Ω–∏, –∑–∞—á–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å —Å–≤–æ–π —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏, –∫–∞–∫ —ç—Ç–æ –∑–Ω–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º —Ä–∞–∑–≤–∏—Ç–∏–∏, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è.\n"
                        "–ù–∞—á–Ω–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ \"üß† –ê–Ω–∞–ª–∏–∑ MBTI:\" –∏ –ø–∏—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ, —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º —Ç–æ–Ω–æ–º."
                    )
                },
                {"role": "user", "content": prompt}
            ],
            temperature=0,
            max_tokens=500
        )

        answer = response.choices[0].message.content.strip()

        MAX_RESPONSE_CHARS = 3500
        if len(answer) > MAX_RESPONSE_CHARS:
            answer = answer[:MAX_RESPONSE_CHARS].rstrip() + "\n\n‚Ä¶ (–æ—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â—ë–Ω)"

        user_history[user_id]["mbti"] = answer
        with open(HISTORY_FILE, "w", encoding="utf-8") as f:
            json.dump(user_history, f, ensure_ascii=False, indent=2)

        text = answer
        if update.message:
            await update.message.reply_text(text)
        else:
            await update.callback_query.message.reply_text(text)

    except Exception as e:
        text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}"
        if update.message:
            await update.message.reply_text(text)
        else:
            await update.callback_query.message.reply_text(text)


# --- –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ ---
async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id in user_history:
        del user_history[user_id]
        await update.message.reply_text("‚ôªÔ∏è –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.")
    else:
        await update.message.reply_text("–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("ü§ñ MindChewBot –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
